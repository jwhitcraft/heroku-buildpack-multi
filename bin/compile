#!/usr/bin/env bash

set -e

[ "$BUILDPACK_XTRACE" ] && set -o xtrace

unset GIT_DIR

suppress_output() {
  local TMP_COMMAND_OUTPUT
  TMP_COMMAND_OUTPUT=$(mktemp "/tmp/buildpack-${FUNCNAME[0]}.XXXXXX")
  trap "rm -rf '$TMP_COMMAND_OUTPUT' >/dev/null" RETURN

  "$@" >"$TMP_COMMAND_OUTPUT" 2>&1 || {
    local exit_code="$?"
    cat "$TMP_COMMAND_OUTPUT"
    return "$exit_code"
  }

  if [ "$BUILDPACK_XTRACE" ]; then
    cat "$TMP_COMMAND_OUTPUT"
  fi

  return 0
}

for BUILDPACK in $(cat $1/.buildpacks); do
  # for our use case, the buildpacks are already in the right place /tmp/buildpacks
  if [ -d "/tmp/buildpacks/${BUILDPACK}" ]; then
    echo "-----> Testing buildpack $BUILDPACK"
    dir="/tmp/buildpacks/${BUILDPACK}"

    cd $dir
    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1 $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1 >$1/last_pack_release.out
      fi
    else
      echo "Couldn't detect any framework for this buildpack. Exiting."
      exit 1
    fi
  fi
done

if [ -e $1/last_pack_release.out ]; then
  echo "Using release configuration from last framework ($framework)."
fi
